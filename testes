[Hint]
x       y       tempo   Abordagem

=====================================================================
==================== Testes no notebook Positivo ====================
=====================================================================

++++++++++++ Testes rodados com 2 processos

100     10      0.94    Abertura de ambas as janelas ao mesmo tempo com acesso GET
1000    10      49.0    Abordagem anterior
100     100     48.8    Abordagem anterior 




--------xxxxxxxxxxxx
100     10      0.92    Mesma abordagem anterior, com o fechamento da janela ao fim do loop
100     100       x     Abordagem anterior
1000    10        x     Abordagem anterior 
-------xxxxxxxxxxxxx        *Calls não-RMA do MPI não podem ocorrer antes do fechamento da janela




100     10      0.92    Abertura das janelas com fechamento em seguida, ainda utilizando GET
1000    10      49.4    Abordagem anterior
100     100     4.77    Abordagem anterior




100     10      0.88    Abertura de cada janela com seu fechamento em seguida utilizando o PUT
1000    10      48.8    Abordagem anterior
100     100     4.77    Abordagem anterior
1000    100     961.0   Abordagem anterior



-------------------------



100     10      0.56    Usando send-recv original
100     100     4.33    Abordagem anterior
1000    10      46.5    Abordagem anterior
1000    100     854.6   Abordagem anterior




-------------------------------------------------------------


Testes com POST/WAIT

100     10      0.62    Usando POST/WAIT com wait no final
100     100     4.40    Abordagem anterior 
1000    10      46.3    Abordagem anterior 


100     10      0.63    Usando POST/WAIT com calls em diferentes ifs
100     100     4.43    Abordagem anterior
1000    10      60.0    Abordagen anterior



==============================================================
=============== TESTES NO HPC - Workstation ==================
==============================================================


+++++++ Testes com 4 processos

Testes com Send/Recv

100	100	1.39	Usando Isend,Irecv do codigo original.
1000	10	14.80	Abordagem anterior
1000	100	155.50	Abordagem anterior
10000	10	142.63	Abordagem anterior


Testes com POST/WAIT

100	100	1.46	Calls Post/wait/start/complete sao segmentadas em ifs para cada rank a fim de 'paralelizar' suas acoes
1000	10	15.37	Abordagem anterior
1000	100	154.90	Abordagem anterior
10000	10	142.14	Abordagem anterior
10000	1000	15373.6	Abordagem anterior



100	100	1.20	Calls post/wait/start/complete divididas par a par na seguinte ordem: Start => Post => PUT => Complete => Wait $$$$ Mantem-se os ifs de acordo com o rank em cada call.
1000	10	12.8	Abordagem anterior
1000	100	133.2	Abordagem anterior
10000	10	121.6	Abordagem anterior






============================================================
========== TESTES NO YEMOJA - cluster128g ==================
============================================================

++++++++ Testes com 4 processos (4 nodes, 1 em cada)

[Send/Recv]
1000	100	134.8	Calls no modelo send/recv padrao
100	1000	11.2	Abordagem anterior
100	10000	111.9	Abordagem anterior




[Fence]
1000	100	135.1	Calls Win_fenc de abertura e fechamento padrao com PUT
100	1000	11.0	Abordagem anterior
100	10000	130.0	Abordagem anterior





[Post/Start]
1000	100	141.2	Calls do post/start/complete/wait seguindo na ordem escrita ao mesmo tempo para ambos L e R
100	1000	11.7	Abordagem anterior
100	10000	127.7	Abordagem anterior

100	1000	11.1	Calls do post/s/c/w em ordem para o L e depois para o R
100	10000	127.9	Abordagem anterior





[Start/Post]
1000	100	139.5	Calls post/wait/start/complete divididas par a par na seguinte ordem: Start => Post => PUT => Complete => Wait $$$$ Mantem-se os ifs de acordo com o rank em cada call.
1000	100	140.4	Abordagem anterior
100	1000	11.6	Abordagem anterior
100	10000	131.7	Abordagem anterior




[Lock/Unlock]
1000	100		Utilizacao das Calls MPI_Win_lock/unlock com o MPI_LOCK_EXCLUSIVE.
100	1000	11.6	Abordagem anterior
100	10000	125.2	Abordagem anterior

100	10000	179.2	Abordagem anterior
100	1000	18.0	Abordagem anterior





++++++++ Testes com 4 processos (1 node, 4 processos nele)


[Send/Recv]
100	1000	10.8	Send/recv padrao
100	10000	125.4
1000	100	133.2	Abordagem anterior
1000	1000




[Post/Wait]
1000	100	133.1	Calls post/wait na sequencia padrao de acesso: POST => START => PUT => COMPLETE => WAIT




[Post/Wait + thread]
1000	100	134.0	Utilização de threads para a comunicação com os processos vizinhos. Uma section para cada thread se comunicar com o proc vizinho à esquerda e à direita. Cada section contém essa estrutura: POST(L) => START(R) => PUT(R) => COMPLETE(R) => WAIT(L) [O oposto também é válido: L vs. R]
1000	1000




[Start/Post]
1000	100	133.6	Calls post/wait/start/complete divididas par a par na seguinte ordem: Start => Post => PUT => Complete => Wait $$$$ Mantem-se os ifs de acordo com o rank em cada call.




[Lock/Unlock]
1000	100	133.4	Utilizacao das Calls MPI_Win_lock/unlock com o MPI_LOCK_EXCLUSIVE.
100	1000	10.8	Abordagem anterior
100	10000	126.1	Abordagem anterior









